/*
 *  BAEKJOON ONLINE JUDGE
 *  https://www.acmicpc.net
 *  Problem Number: 2018
 *  Level: Silver V
 *  Algorithm: 수학, 투 포인터
 */

const N = require('fs').readFileSync('/dev/stdin').toString().trim();

/* Pseudocode *
    N이 주어졌을 때, N을 몇 개의 연속된 자연수의 합으로 나타낼 수 있는지 가지수를 구하는 문제
    N이 15일 때 15를 나타내는 방법은...
        1. 15
        2. 1 + 2 + 3 + 4 + 5
        3. 4 + 5 + 6
        4. 7 + 8
    총 4가지가 있다!

    투 포인터를 사용해서 언제 start,end 포인터를 이동시킬 건지만 잘 작성하면 되는 문제
    start, end, count, sum 모두 1에서 시작
    만약 sum이 N보다 작다면 -> 앞으로 이동
        -> sum을 증가시키면서 sum이 15보다 크거나 같을 때까지 반복
    만약 sum이 N보다 크다면 -> 뒤로 이동
        -> sum을 빼면서 sum이 15보다 작아질 때까지 반복
    만약 sum이 N과 같다면 -> 앞으로 이동, count 증가
 */

/**
 *  투 포인터 (Two Pointers)
 *  배열이나 문자열같은 선형 구조에서 각자 다른 원소를 가르키는 2개의 포인터를 조작, 원하는 것을 얻어내는 개념
 */

// ========================================================= 예시 =========================================================
// N = 15
// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
//  1. 15
//  2. 1 + 2 + 3 + 4 + 5
//  3. 4 + 5 + 6
//  4. 7 + 8

// sum : 1 (초기 값)
//  1 < 15
//  -> start : 1
//  -> end++ : 2 (1 + 1)
//  -> sum++ : 1 + 2 = 3

// sum : 3
//  3 < 15
//  -> start : 1
//  -> end++ : 3 (2 + 1)
//  -> sum++ : 1 + 2 + 3 = 6

// sum : 6
//  6 < 15
//  -> start : 1
//  -> end++ : 4 (3 + 1)
//  -> sum++ : 1 + 2 + 3 + 4 = 10

// sum : 10
//  10 < 15
//  -> start : 1
//  -> end++ : 5 (4 + 1)
//  -> sum++ : 1 + 2 + 3 + 4 + 5 = 15 (1 + 2 + 3 + 4 + 5)

// ==================================================================
// sum : 15
//  15 === 15
//  -> count++ : 2 (1 + 1)
//  -> start : 1
//  -> end++ : 6 (5 + 1)
//  -> sum++ : 15 + 6 = 21
// ==================================================================

// sum : 21
//  21 > 15
//  -> count : 2
//  -> start++ : 2 (1 + 1)
//  -> end : 6
//  -> sum-- : 15 + 6 - 1 = 20

// sum : 20
//  20 > 15
//  -> count : 2
//  -> start++ : 3 (2 + 1)
//  -> end : 6
//  -> sum-- : 15 + 6 - 1 - 2 = 18

// sum : 18
//  18 > 15
//  -> count : 2
//  -> start++ : 4 (3 + 1)
//  -> end : 6
//  -> sum-- : 15 + 6 - 1 - 2 - 3 = 15 (4 + 5 + 6)

// ============================================================
// sum : 15
//  15 === 15
//  -> count++ : 3 (2 + 1)
//  -> start : 4
//  -> end++ : 7 (6 + 1)
//  -> sum++ : 15 + 7 = 22
// ============================================================

// sum : 22
//  22 > 15
//  -> count : 3
//  -> start++ : 5 (4 + 1)
//  -> end : 7
//  -> sum-- : 15 + 7 - 4 = 18

// sum : 18
//  18 > 15
//  -> count : 3
//  -> start++ : 6 (5 + 1)
//  -> end : 7
//  -> sum-- : 15 + 7 - 4 - 5 = 13

// sum : 13
//  13 < 15
//  -> count : 3
//  -> start : 6
//  -> end++ : 8 (7 + 1)
//  -> sum++ : 15 + 7 - 4 - 5 + 8 = 21

// sum : 21
//  21 > 15
//  -> count : 3
//  -> start++ : 7 (6 + 1)
//  -> end : 8
//  -> sum-- : 15 + 7 - 4 - 5 + 8 - 6 = 15 (7 + 8)

// ========================================================
// sum : 15
//  15 === 15
//  -> count++ : 4 (3 + 1)
//  -> start : 7
//  -> end++ : 9 (8 + 1)
//  -> sum++ : 15 + 9 = 24
// ========================================================
// ========================================================= 예시 =========================================================

let start = 1;
let end = 1;
let sum = 1;
let count = 1; // N도 count에 포함

while (end !== Number(N)) {
    // 합이 N보다 작다면
    if (sum < N) {
        //  앞으로 이동
        //  end를 증가시키고
        //  end + sum
        end++;
        sum += end;
    } else if (sum > N) {
        //  뒤로 이동
        //  sum에서 start를 빼고
        //  start++
        sum -= start;
        start++;
    } else {
        //  result === N
        //  count 증가
        //  앞으로 이동
        count++;
        end++;
        sum += end;
    }
}

console.log(count);
